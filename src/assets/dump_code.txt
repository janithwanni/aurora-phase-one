const freeNodesRefs = rootNode
        .child("/node/4")
        .orderByChild("occupiedBy");
      console.log("found free nodes", freeNodesRefs);

      freeNodesRefs.once("value").then(snapshot => {
        console.log(snapshot.val());
        let nodeID = Object.keys(snapshot.val())[0];
        rootNode
          .child("/node/" + ringLevelToQuery + "/" + nodeID + "/occupiedBy")
          .set("team-" + teamID);
        console.log(
          "teamID occupied node",
          "/node/" + ringLevelToQuery + "/" + nodeID + "/occupiedBy)"
        );
        console.log(snapshot.val());
        const questionSet = snapshot.val()[Object.keys(snapshot.val())[0]]
          .questionSet;
        console.log("found question sets", questionSet);
        rootNode
          .child("/questionSet/" + questionSet)
          .once("value")
          .then(snapshot => {
            console.log("finding questions in set");
            let question = snapshot.val()[Object.keys(snapshot.val())[0]];
            console.log("found question", question);
            question.questionID = Object.keys(snapshot.val())[0];
            rootNode
              .child("/questionSet/" + questionSet + "/" + question.questionID)
              .update({ usedBy: "team-" + teamID });
            console.log("setting question used by team");

            console.log("question id", question.questionID);
            question.correctAnswerText =
              question.correctAnswerID == 1
                ? question.answerOne
                : question.correctAnswerID == 2
                  ? question.answerTwo
                  : question.correctAnswerID == 3
                    ? question.answerThree
                    : question.answerFour;
            console.log(question.correctAnswerText);
            question.answerGiven = false;
            question.timeExceeded = false;
            question.competitionOver = false;
            question.currentRingLevel = 4;
            question.currentNodeNumber = question.questionID.split("-")[1];
            rootNode
              .child("/teamCurrentQuestion/team-" + teamID)
              .set({
                questionID: question.questionID,
                questionText: question.questionText,
                questionImage: question.questionImage,
                answerOne: question.answerOne,
                answerTwo: question.answerTwo,
                answerThree: question.answerThree,
                answerFour: question.answerFour,
                correctAnswerID: question.correctAnswerID,
                correctAnswerText: question.correctAnswerText,
                answerGiven: question.answerGiven,
                timeExceeded: question.timeExceeded,
                competitionOver: question.competitionOver,
                currentRingLevel: question.currentRingLevel,
                currentNodeNumber: question.currentNodeNumber
              })
              .then(() => {
                console.log("its done");
              });
          });
      });
    }

    <!-- 
<div style="display: flex;flex-direction: column;
justify-content: center;
align-items: center;
width: 100%;
height: 100%;;padding-top:60px;padding-bottom: 60px;">
  <div style="content: none;
background: url(../../assets/background.png) no-repeat;
background-size: cover;
opacity: 0.5;
top: 0;
left: 0;
bottom: 0;
right: 0;
position: absolute;
z-index: -1"></div>
   <div style="flex-direction: column">
  <h1 class="h1" style="flex-grow:1;font-size:64px;color:#2e2d83 !important;font-weight:400;text-align:center;justify-content:center;font-family: 'Montserrat', sans-serif !important;color:#fff;">Aurora 2018</h1>


   <div> 
  <app-ring-view-comp style="flex-grow:2"></app-ring-view-comp>
   </div>
   <div style="justify-content: center;align-content: center;align-items: center;display: flex;/*! width: 500px; *//*! height: 500px; */padding-top: 10px;/*! flex-grow: 1; */"
      *ngIf="competitionStart == false"> 
  <button style="flex-grow:3;font-size: 18px;" mat-raised-button color="primary" (click)="startCompetition();">Start Competition</button>
   </div> 
  <div *ngIf="competitionStart == false">
    <app-timer-view-comp></app-timer-view-comp>
  </div>
   
</div> 
</div> -->